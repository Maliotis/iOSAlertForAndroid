apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.Maliotis'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        renderscriptTargetApi 29 //must match target sdk and build tools
        renderscriptSupportModeEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

configurations {
    myConfig
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'com.eightbitlab:blurview:1.6.2'
    implementation 'com.android.support:support-annotations:28.0.0'

    myConfig 'com.eightbitlab:blurview:1.6.2'
    myConfig 'com.android.support:support-annotations:28.0.0'
}

task copyLibs(type: Copy) {
    from configurations.myConfig
    into 'libs'
}

//project.afterEvaluate {
//    def isAndroidLibraryProject = project.plugins.hasPlugin('com.android.library')
//    if(isAndroidLibraryProject) {
//        task copyDeps(type:Copy) {
//            from configurations.myConfig {
//                include '**/*.jar'
//            }
//            into "./build/intermediates/packaged-classes/release/libs" // this folder gets packaged inside the AAR
//        }
//        mergeReleaseJniLibFolders.dependsOn copyDeps // only this stage worked for me - neither earlier, nor later
//
//        task copyDebugDeps(type:Copy) {
//            from configurations.myConfig {
//                include '**/*.jar'
//            }
//            into "./build/intermediates/packaged-classes/debug/libs"
//        }
//        mergeDebugJniLibFolders.dependsOn copyDebugDeps
//    }
//}
